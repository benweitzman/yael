-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/benweitzman/yael-opentracing#readme</a>
@package yael-opentracing
@version 0.1.0.0

module Lib
someFunc :: IO ()

module Yael.Eff.OpenTracing
data Tracing m
Tracing :: (forall a. SpanOpts -> m a -> m a) -> ((Span -> Span) -> m ()) -> (Text -> (SpanOpts -> SpanOpts) -> m SpanOpts) -> Tracing m
[_spanning] :: Tracing m -> forall a. SpanOpts -> m a -> m a
[_modifyActive] :: Tracing m -> (Span -> Span) -> m ()
[_mkSpanOpts] :: Tracing m -> Text -> (SpanOpts -> SpanOpts) -> m SpanOpts
spanning :: HasEff Tracing f m => SpanOpts -> EffT f m a -> EffT f m a
modifyActive :: (Span -> Span) -> () :+ '[Tracing]
mkSpanOpts :: Text -> (SpanOpts -> SpanOpts) -> SpanOpts :+ '[Tracing]
defaultSpanOpts :: Text -> SpanOpts :+ '[Tracing]
_defaultSpanOpts :: Tracing m -> Text -> m SpanOpts
defaultTrace :: forall m f. (GTraceable m (Rep (f m)), Generic (f m), CheckFun m, Monad m) => Tracing m -> f m -> f m
otTracing :: (MonadIO m, MonadMask m) => Reader ParentSpan m -> Tracer -> Tracing m
instance (Yael.Eff.OpenTracing.Split m v, GHC.TypeLits.KnownSymbol n) => Yael.Eff.OpenTracing.GTraceable m (GHC.Generics.S1 ('GHC.Generics.MetaSel ('GHC.Maybe.Just n) u s l) (GHC.Generics.K1 r v))
instance forall k1 (m :: * -> *) (f :: k1 -> *) k2 (x :: GHC.Generics.Meta). Yael.Eff.OpenTracing.GTraceable m f => Yael.Eff.OpenTracing.GTraceable m (GHC.Generics.M1 k2 x f)
instance forall k (m :: * -> *) (f :: k -> *) (g :: k -> *). (Yael.Eff.OpenTracing.GTraceable m f, Yael.Eff.OpenTracing.GTraceable m g) => Yael.Eff.OpenTracing.GTraceable m (f GHC.Generics.:*: g)
instance Yael.Eff.OpenTracing.CheckFun m => Yael.Eff.OpenTracing.Split m (m x)
instance Yael.Eff.OpenTracing.Split m (Yael.Eff.HigherOrder n m)
instance Yael.Eff.OpenTracing.Split m b => Yael.Eff.OpenTracing.Split m (a -> b)
